;; Collection: List and Vector (Part 1)

;; List
'(1 2 3 4 5 6 7 8 9)
(def mylist '(1 2 3 4 5 6 7 8 9))
mylist
(take 4 mylist)
(drop 3 mylist)
(first mylist)
(second mylist)
(rest mylist)
(cons 0 mylist)
(last mylist)
(butlast mylist)
(nth mylist 0)
(nth mylist 2)
(count mylist)

;; Vector
[1 2 3 4 5 6 7 8 9]
(def myvec [1 2 3 4 5 6 7 8 9])
(nth myvec 0)
(nth myvec 2)
(take 5 myvec)
(drop 3 myvec)
(cons 10 myvec)
(conj myvec 10)
(concat mylist myvec)
(concat [1 2 3] [4 5 6])
(concat #{1 2 3} '(1 2 3))
(seq {1 2 3 4 5 6})
(count '())
(count [])
(rest [1])
(rest '(100))
(cons :a '(:b :c :d :e))
(conj '(:a :b :c :d) :e)
(peek '(:a :b :c :d :e))
(pop '(:a :b :c :d :e))
(range 1 10)
(range 10)
(range 1 10 2)
(repeat 5 7)

